# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging
import asyncio
from functools import wraps

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telethon import events, Button
from telethon.tl.types import InputDocument

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from utils import auth
from data import loader
from utils.card_gen import image_gen  # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
from utils import parcer_tier_list  # –ü–∞—Ä—Å–µ—Ä —Ç–∏—Ä –ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

sticker_list = loader.load_sticker()

class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞"""

    def __init__(self, client, persistent_keyboard=None):
        self.client = client
        self.persistent_keyboard = persistent_keyboard

    def _auth_required(self, handler):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @wraps(handler)
        async def wrapper(event, *args, **kwargs):

            is_button_click = hasattr(event, 'data') and event.data

            if not is_button_click:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å / –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø—Ä–∏–≤–µ—Ç"
                is_text_command = hasattr(event, 'text') and (
                    event.text.startswith('/') or "–ø—Ä–∏–≤–µ—Ç" in event.text.lower())
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
                if not is_text_command:
                    logger.info(f"–°–æ–±—ã—Ç–∏–µ {event.text}")
                    user_id = event.sender_id 
                    user_name = event.sender.username
                    user_role = await auth.is_vip(event)
                    
                    if not user_role:
                        logger.info(f"–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞\nID: {user_id}\nUserName: {user_name}")
                        await self._send_sticker(event.chat_id, "–∞–ª—å–±–µ–¥–æ –≤—ã–≥–ª—è–¥—ã–≤–∞–µ—Ç")
                        await self._send_message(
                            event.chat_id,
                            f"‚õî –í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É –∫—Ä—É–≥—É –ª–∏—Ü!",
                            buttons=self.persistent_keyboard
                        )
                        return
            return await handler(event, *args, **kwargs)
        return wrapper

    async def _send_message(self, chat_id, text, buttons=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.client.send_message(
            entity=chat_id,
            message=text,
            buttons=buttons,
            reply_to=False
        )

    async def _send_sticker(self, chat_id, name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        sticker = InputDocument(
            id=sticker_list[name]["id"],
            access_hash=sticker_list[name]["hash"],
            file_reference=b''
        )
        await self.client.send_message(
            entity=chat_id,
            file=sticker,
            reply_to=False
        )
    async def _send_with_delay(self, chat_id, text, delay=0.6, buttons=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–∞–±–æ—Ä–∞"""
        async with self.client.action(chat_id, 'typing'):
            await asyncio.sleep(delay)
            await self._send_message(chat_id, text, buttons)

    def register_handler(self, pattern=None, pattern_black_list=None, event_type=events.NewMessage):
        """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        def decorator(handler):
            @self._auth_required
            @wraps(handler)
            async def wrapped_handler(event):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
                if pattern_black_list and event.text:
                    from re import match
                    for black_pattern in pattern_black_list:
                        if match(black_pattern, event.text):
                            logger.debug(
                                f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {black_pattern}")
                            return None
                if hasattr(event, 'text'):
                    logger.info(f"–°–æ–±—ã—Ç–∏–µ {event.text}")
                else:
                    if hasattr(event, 'data'):
                        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {event.data.decode()}")
                return await handler(event)

            self.client.add_event_handler(
                wrapped_handler,
                event_type(pattern=pattern) if pattern else event_type()
            )
            return wrapped_handler
        return decorator

    async def send_error(self, chat_id, text, sticker="—Ä–∞–π–¥–µ–Ω —É–ø–∞–ª–∞"):
        await self._send_sticker(chat_id, sticker)
        await self._send_with_delay(chat_id, text, 0.8)

    async def send_tier_list(self,chat_id,name):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ä–æ–ª–∏
        tier, role = parcer_tier_list.parse_genshin_tier_list(name)
        if tier != "–ù–ï–ò–ó–í–ï–°–¢–ù–û":
            await self._send_with_delay(
                chat_id,
                f"–†–µ–π—Ç–∏–Ω–≥: {tier}\n–†–æ–ª—å: {role}",
                0.5
            )

    async def send_char_descript(self, chat_id, char_data):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if description := char_data.get('description', {}).get('desc', []):
            for line in description:
                await self._send_with_delay(chat_id, line, 0.7)
        else:
            await self._send_with_delay(
                chat_id,
                "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                0.5
            )

    async def send_char_info(self, event, char_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        char_data = self.characters.get(char_name)
        if not char_data:
            await self.send_error(event.chat_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ .-.", sticker="–∞–ª—å–±–µ–¥–æ –≤—ã–≥–ª—è–¥—ã–≤–∞–µ—Ç")
            return await event.answer("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            await self._send_with_delay(event.chat_id, "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", 0.3)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            buffer = image_gen.generate_character_card(
                char_name,
                char_data["materials"],
                char_data['element']
            )
            buffer.name = "character_card.jpg"

            await self.client.send_file(
                event.chat_id,
                buffer,
                caption=f"{char_name.capitalize()} ({char_data['element'].capitalize()})",
                force_document=False
            )

            await self.send_tier_list(event.chat_id, char_name)
            await self.send_char_descript(event.chat_id, char_data)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            buttons = [
                [Button.inline("üîß –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∫–∞—á–∫–µ",
                               f"leveling:{char_name}")],
                [Button.inline("‚öîÔ∏è –û—Ä—É–∂–∏–µ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã",
                               f"artwep:{char_name}")]
            ]

            await self._send_with_delay(
                event.chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
                0.5,
                buttons=buttons
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_name}: {str(e)}")
            print(e)
            await self.send_error(event.chat_id,"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ .-.")
