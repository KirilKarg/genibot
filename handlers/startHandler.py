# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telethon import Button

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from handlers.base import BaseHandler  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

WELCOME_MESSAGES = {
    'full': [
        ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! üëã", 0.2),
        ("–Ø - –±–æ—Ç-–≥–∏–¥ –ø–æ –º–∏—Ä—É –¢–µ–π–≤–∞—Ç–∞", 0.6),
        ("–ü–æ–∫–∞ —á—Ç–æ –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω...", 0.6),
        ("–ù–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!", 0.8),
        ("–¢–∞–∫—Å", 0.2),
        ("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", 0.8),
        ("–í–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –∏–ª–∏ —Å–µ—Ç–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", 0.8),
        ("–£ –º–µ–Ω—è —Ç–∞–∫–∂–µ –µ—Å—Ç—å –º–µ–Ω—é  üòÑ", 0.6),
        ("–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:", 0.8)
    ],
    'short': [
        ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! üëã", 0.2),
        ("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", 0.8),
        ("–í–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –∏–ª–∏ —Å–µ—Ç–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", 0.8),
        ("–£ –º–µ–Ω—è —Ç–∞–∫–∂–µ –µ—Å—Ç—å –º–µ–Ω—é  üòÑ", 0.6),
        ("–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:", 0.8)
    ]
}


class StartHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    def __init__(self, client, generate_elements_buttons, persistent_keyboard):
        super().__init__(client, persistent_keyboard)
        self.generate_elements_buttons = generate_elements_buttons
        self._register_handlers()
        # <- –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ StartHandler...")

    async def _send_welcome_sequence(self, chat_id, short_version=False, no_message = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
        inline_buttons = [
            [Button.inline("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", b"characters")],
            [Button.inline("–û—Ä—É–∂–∏–µ", b"weapons")],
            [Button.inline("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", b"artifacts")]
        ]
        if not no_message:
            messages = WELCOME_MESSAGES['short' if short_version else 'full']

            await self._send_sticker(chat_id, "—è—ç –º–∏–∫–æ —Å—Ç—É—á–∏—Ç")
            await self._send_with_delay(chat_id, messages[0][0], 0.5)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            for text, delay in messages[1:-2]:
                await self._send_with_delay(chat_id, text, delay)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await self._send_with_delay(chat_id, messages[-2][0], messages[-2][1], self.persistent_keyboard)
            await self._send_with_delay(chat_id, messages[-1][0], messages[-1][1], inline_buttons)
        else:
            await self._send_with_delay(chat_id, "–î–µ—Ä–∂–∏:", 0.5, Button.inline("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", b"characters"))




    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""

        @self.register_handler(pattern='/start')
        async def handle_start(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            await self._send_welcome_sequence(event.chat_id)

        @self.register_handler(pattern='^üëã –ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å\.?$')
        async def handle_greeting(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
            await self._send_welcome_sequence(event.chat_id, short_version=True)

        @self.register_handler(pattern='–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π')
        async def handle_greeting(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
            await self._send_welcome_sequence(event.chat_id, no_message=True)


