# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telethon import Button
from fuzzywuzzy import fuzz

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from data import loader
from utils import parcer_tier_list  # –ü–∞—Ä—Å–µ—Ä —Ç–∏—Ä –ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
from handlers.base import BaseHandler  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


CHARACTERS_MONIKER = loader.load_moniker_with_characters()

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class TextInputHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–∞
    SIMILARITY_THRESHOLD = 70
    
    ELEMENTS = {"–ø–∏—Ä–æ", "–∫—Ä–∏–æ", "–≥–∏–¥—Ä–æ", "—ç–ª–µ–∫—Ç—Ä–æ", "–∞–Ω–µ–º–æ", "–≥–µ–æ", "–¥–µ–Ω–¥—Ä–æ"}

    def __init__(self, client, start_handler, characters, callback_handler, persistent_keyboard):
        super().__init__(client, persistent_keyboard)
        self.callback_handler = callback_handler
        self.characters = characters
        self.start_handler = start_handler
        self._preprocessed_names = self._preprocess_character_names()
        self._register_handlers()

    def _preprocess_character_names(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return {name.lower(): name for name in self.characters}

    def _find_exact_match(self, input_text):
        """–ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        return self._preprocessed_names.get(input_text)

    async def _send_character_rating(self, event, char_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        tier, role = parcer_tier_list.parse_genshin_tier_list(char_name)
        if tier != "–ù–ï–ò–ó–í–ï–°–¢–ù–û":
            await self._send_with_delay(
                event.chat_id,
                f"–†–µ–π—Ç–∏–Ω–≥: {tier}\n–†–æ–ª—å: {role}",
                0.5
            )
            
    async def _handle_error(self, event, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        await self._send_with_delay(
            event.chat_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            0.5,
            buttons=self.persistent_keyboard
        )

    def is_traveler(self, text):
        words = text.split()
        is_traveler_return = False
        only_traveler = True
        element = None
        if "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫" in words:
            is_traveler_return = True
            only_traveler = len(words) == 1
            

        # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if not is_traveler_return:
            found_char = self._find_closest_character(text)
            is_traveler_return = bool(found_char)

        if is_traveler_return and (not only_traveler):
            pass
                
        return is_traveler_return, element
    
    def _find_closest_character(self, input_text):
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        best_match = None
        best_score = 0

        for name in self.characters:
            base_score = fuzz.ratio(input_text, name.lower())
            first_word_score = fuzz.ratio(input_text, name.split()[0].lower())
            current_score = max(base_score, first_word_score)

            if current_score > best_score:
                best_score = current_score
                best_match = name

        return best_match if best_score >= self.SIMILARITY_THRESHOLD else None

    def _find_moniker_closest_character(self, input_text):
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        best_match = None
        best_score = 0

        for name in CHARACTERS_MONIKER:
            base_score = fuzz.ratio(input_text, name.lower())
            first_word_score = fuzz.ratio(input_text, name.split()[0].lower())
            current_score = max(base_score, first_word_score)

            if current_score > best_score:
                best_score = current_score
                best_match = CHARACTERS_MONIKER[name]

        return best_match if best_score >= self.SIMILARITY_THRESHOLD else None
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.register_handler(
            pattern_black_list=[
                r'/start',
                r'^üëã –ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å\.?$',
                r'–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'
                ]
            )
        async def handle_text_input(event):
            """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""

            if (event.text.startswith('/')):
                return

            if "–ø—Ä–∏–≤–µ—Ç" in event.text.lower():
                if self.start_handler:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ StartHandler
                    await self.start_handler._send_welcome_sequence(event.chat_id, short_version=True)
                return
            
            is_travaler, element = self.is_traveler(event.text.lower())
            
            if is_travaler:
                if self.callback_handler:
                    if element == None:
                        await self.callback_handler._handle_element_selection(element="–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",event=event,edit=False)
                    else:
                        print(element)
                        await self.send_char_info(event, f"–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ {element}")
                return
            
            input_text = event.text.strip().lower()

            # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            found_char = self._find_exact_match(input_text)
            is_fuzzy_match = False

            # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if not found_char:
                found_char = self._find_closest_character(input_text)
                is_fuzzy_match = bool(found_char)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏
            if not found_char:
                found_char = self._find_moniker_closest_character(input_text)
                is_fuzzy_match = bool(found_char)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏
            if not found_char:
                return await self._send_character_not_found(event)
            
            if is_fuzzy_match:
                await self._send_with_delay(
                    event.chat_id,
                    f"üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É **{found_char}**?",
                    0.5
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            await self.send_char_info(event, found_char)

    async def _send_character_not_found(self, event, name = "–∫–æ–∑–∞ —Å–º–æ—Ç—Ä–∏—Ç"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        await self._send_sticker(event.chat_id, "–∫–æ–∑–∞ —Å–º–æ—Ç—Ä–∏—Ç")
        await self._send_with_delay(
            event.chat_id,
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é:",
            1,
            buttons=[[Button.inline("üîç –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", b"characters")]]
        )
