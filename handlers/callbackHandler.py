# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging
import os

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telethon import events, Button

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from handlers.base import BaseHandler  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class CallbackHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, client, generate_elements_buttons,
                 generate_characters_buttons, characters):
        super().__init__(client)
        self.generate_elements_buttons = generate_elements_buttons
        self.generate_characters_buttons = generate_characters_buttons
        self.characters = characters
        self._register_handlers()

    async def _handle_element_selection(self, element, event=None, edit=True):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        buttons = self.generate_characters_buttons(element)
        if edit:
            if element.lower() == "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫":
                await event.edit(f"–°—Ç–∏—Ö–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:", buttons=buttons)
            else:
                await event.edit(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å—Ç–∏—Ö–∏–∏ {element.capitalize()}:", buttons=buttons)
        else:
            if element.lower() == "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫":
                await self._send_with_delay(event.chat_id, f"–°—Ç–∏—Ö–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:", buttons=buttons)
            else:
                await self._send_with_delay(event.chat_id, f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å—Ç–∏—Ö–∏–∏ {element.capitalize()}:", buttons=buttons)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""

        @self.register_handler(event_type=events.CallbackQuery)
        async def handle_callback(event):
            """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
            data = event.data.decode('utf-8')

            if data == "characters":
                buttons = [self.generate_elements_buttons()[i:i+2]
                           for i in range(0, len(self.generate_elements_buttons()), 2)]
                await event.edit("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", buttons=buttons)

            elif data.startswith("element:"):
                element = data.split(":")[1]
                await self._handle_element_selection(element, event=event)

            elif data.startswith("char:"):
                char_name = data.split(":")[1]
                await self.send_char_info(event, char_name)

            elif data.startswith("leveling:"):
                char_name = data.split(":")[1]

                await self._send_sticker(event.chat_id, "–∫–ª–∏ –±—å—é—Ç –º–æ–ª–æ—Ç–∫–æ–º")
                await event.respond("üîí –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                                    "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            elif data.startswith("artwep:"):
                char_name = data.split(":")[1]

                await self._send_sticker(event.chat_id, "–∫–ª–∏ –±—å—é—Ç –º–æ–ª–æ—Ç–∫–æ–º")
                await event.respond("üîí –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                                    "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
