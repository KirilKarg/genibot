# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telethon import Button
from fuzzywuzzy import fuzz

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from data import loader
from utils import parcer_tier_list  # –ü–∞—Ä—Å–µ—Ä —Ç–∏—Ä –ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
from utils.card_gen import image_gen  # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
from handlers.base import BaseHandler  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


CHARACTERS_MONIKER = loader.load_moniker_with_characters()

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


class TextInputHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–∞
    SIMILARITY_THRESHOLD = 70
    DESCRIPTION_INITIAL_DELAY = 1.2
    DESCRIPTION_STANDARD_DELAY = 0.7

    def __init__(self, client, start_handler, callback_handler, characters, persistent_keyboard):
        super().__init__(client, persistent_keyboard)
        self.characters = characters
        self.callback_handler = callback_handler  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CallbackHandler
        self.start_handler = start_handler  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ StartHandler
        self._preprocessed_names = self._preprocess_character_names()
        self._register_handlers()

    def _preprocess_character_names(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return {name.lower(): name for name in self.characters}

    def _find_exact_match(self, input_text):
        """–ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        return self._preprocessed_names.get(input_text)

    def _find_closest_character(self, input_text):
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        best_match = None
        best_score = 0

        for name in self.characters:
            base_score = fuzz.ratio(input_text, name.lower())
            first_word_score = fuzz.ratio(input_text, name.split()[0].lower())
            current_score = max(base_score, first_word_score)

            if current_score > best_score:
                best_score = current_score
                best_match = name

        return best_match if best_score >= self.SIMILARITY_THRESHOLD else None

    def _find_moniker_closest_character(self, input_text):
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        best_match = None
        best_score = 0

        for name in CHARACTERS_MONIKER:
            base_score = fuzz.ratio(input_text, name.lower())
            first_word_score = fuzz.ratio(input_text, name.split()[0].lower())
            current_score = max(base_score, first_word_score)

            if current_score > best_score:
                best_score = current_score
                best_match = CHARACTERS_MONIKER[name]

        return best_match if best_score >= self.SIMILARITY_THRESHOLD else None

    def _find_traveler_character(self, input_text):
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–æ–∑–≤–∏—â–∞–º"""
        traveler_names = ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
                          "traveler", "–≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π", "–ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç"]
        traveler_monikers = {
            "–ª—é–º–∏–Ω": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–∏—Ç–µ—Ä": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–ø—É—Ç–Ω–∏–∫": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–≥–µ—Ä–æ–π": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "traveler": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "–≥–≥": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"
        }

        best_score = 0
        best_match = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
        for name in traveler_names:
            current_score = fuzz.ratio(input_text.lower(), name.lower())
            if current_score > best_score:
                best_score = current_score
                best_match = "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑–≤–∏—â–∞
        for moniker in traveler_monikers:
            current_score = fuzz.ratio(input_text.lower(), moniker.lower())
            if current_score > best_score:
                best_score = current_score
                best_match = traveler_monikers[moniker]

        return best_match if best_score >= self.SIMILARITY_THRESHOLD else None

    async def _send_character_card(self, event, char_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        char_data = self.characters[char_name]
        try:
            buffer = image_gen.generate_character_card(
                char_name,
                char_data["materials"],
                char_data['element']
            )
            buffer.name = "character_card.jpg"

            await self.client.send_file(
                event.chat_id,
                buffer,
                caption=f"{char_name.capitalize()} ({char_data['element'].capitalize()})",
                force_document=False
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {char_name}: {str(e)}")
            raise

    async def _send_character_rating(self, event, char_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        tier, role = parcer_tier_list.parse_genshin_tier_list(char_name)
        if tier != "–ù–ï–ò–ó–í–ï–°–¢–ù–û":
            await self._send_with_delay(
                event.chat_id,
                f"–†–µ–π—Ç–∏–Ω–≥: {tier}\n–†–æ–ª—å: {role}",
                0.5
            )

    async def _send_character_description(self, event, char_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if description := char_data.get('description', {}).get('desc', []):
            for i, line in enumerate(description):
                delay = self.DESCRIPTION_INITIAL_DELAY if i < 2 else self.DESCRIPTION_STANDARD_DELAY
                await self._send_with_delay(event.chat_id, line, delay)
        else:
            await self._send_with_delay(
                event.chat_id,
                "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                0.5
            )

    async def _send_character_actions(self, event, char_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons = [
            [Button.inline("üîß –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∫–∞—á–∫–µ", f"leveling:{char_name}")],
            [Button.inline("‚öîÔ∏è –û—Ä—É–∂–∏–µ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", f"artwep:{char_name}")]
        ]
        await self._send_message(
            event.chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            buttons=buttons
        )

    async def _send_character_info(self, event, char_name, show_suggestion=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            await self._send_with_delay(event.chat_id, "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", 0.3)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            if show_suggestion:
                await self._send_with_delay(
                    event.chat_id,
                    f"üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É **{char_name}**?",
                    0.5
                )

            char_data = self.characters[char_name]
            await self._send_character_card(event, char_name)
            await self._send_character_rating(event, char_name)
            await self._send_character_description(event, char_data)
            await self._send_character_actions(event, char_name)

        except KeyError:
            error_msg = f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {char_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            logger.error(error_msg)
            await self._handle_error(event, error_msg)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_name}: {str(e)}"
            logger.error(error_msg)
            await self._handle_error(event, error_msg)

    async def _handle_error(self, event, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        await self._send_with_delay(
            event.chat_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            0.5,
            buttons=self.persistent_keyboard
        )

    def is_traveler(self, text):
        words = text.split()
        is_traveler_return = False
        if "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫" in words:
            is_traveler_return = len(words) == 1

        # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if not is_traveler_return:
            found_char = self._find_traveler_character(text)
            is_traveler_return = bool(found_char)

        return is_traveler_return

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.register_handler(
            pattern_black_list=[
                r'/start',
                r'^üëã –ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å\.?$'
            ]
        )
        async def handle_text_input(event):
            """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""

            if (event.text.startswith('/')):
                return

            if "–ø—Ä–∏–≤–µ—Ç" in event.text.lower():
                if self.start_handler:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ StartHandler
                    await self.start_handler._send_welcome_sequence(event.chat_id, short_version=True)
                return

            if self.is_traveler(event.text.lower()):
                if self.callback_handler:
                    await self.callback_handler.handle_element_selection(chat_id=event.chat_id, element="–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫")
                return

            input_text = event.text.strip().lower()

            # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            found_char = self._find_exact_match(input_text)
            is_fuzzy_match = False

            # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if not found_char:
                found_char = self._find_closest_character(input_text)
                is_fuzzy_match = bool(found_char)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏
            if not found_char:
                found_char = self._find_moniker_closest_character(input_text)
                is_fuzzy_match = bool(found_char)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏
            if not found_char:
                return await self._send_character_not_found(event)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            await self._send_character_info(event, found_char, show_suggestion=is_fuzzy_match)

    async def _send_character_not_found(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        await self._send_with_delay(
            event.chat_id,
            "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é:",
            1,
            buttons=[[Button.inline("üîç –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", b"characters")]]
        )
