# –°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
from telethon import TelegramClient, Button
import asyncio
import aioconsole
from tabulate import tabulate

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
import openKey
from data import loader
from handlers.startHandler import StartHandler
from handlers.textInputHandler import TextInputHandler
from handlers.callbackHandler import CallbackHandler

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from database import db
from database.db import add_log

bot_token, api_key, api_hash = openKey.load_and_decrypt_token().split("\n")

bot_running = True
current_client = None

CHARACTERS = loader.load_characters()

ELEMENTS = loader.load_elements_with_characters()

async def reload_data():
    global CHARACTERS, ELEMENTS
    CHARACTERS = loader.load_characters()
    ELEMENTS = loader.load_elements_with_characters()
    await add_log("DEBUG", __name__,"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

client = TelegramClient('bot_session', int(api_key), api_hash)

def generate_elements_buttons():
    elements = list(ELEMENTS.keys())
    return [Button.inline(e.capitalize(), f"element:{e}") for e in elements]

def generate_characters_buttons(element):
    characters = ELEMENTS.get(element, [])
    buttons = []
    for char in characters:
        buttons.append([Button.inline(f"{char.capitalize()}", f"char:{char}")])
    buttons.append([Button.inline("‚Üê –ù–∞–∑–∞–¥", "characters")])
    return buttons

PERSISTENT_KEYBOARD = [
    [Button.text("üëã –ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", resize=True)],
    [Button.text("–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", resize=True)]
]

async def init_handlers(client):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    objStartHandler = StartHandler(
        client=client,
        generate_elements_buttons=generate_elements_buttons,
        persistent_keyboard=PERSISTENT_KEYBOARD
    )
    objCallbackHandler = CallbackHandler(
        client=client,
        generate_elements_buttons=generate_elements_buttons,
        generate_characters_buttons=generate_characters_buttons,
        characters=CHARACTERS
    )
    TextInputHandler(
        client=client,
        characters=CHARACTERS,
        start_handler=objStartHandler,
        callback_handler=objCallbackHandler,
        persistent_keyboard=PERSISTENT_KEYBOARD
    )

    await add_log("DEBUG", __name__, "–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∫–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def command_line_interface():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    global bot_running, current_client
    while bot_running:
        try:
            command = await aioconsole.ainput(">>> ")
            if command.strip().lower() == "exit":
                print("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                await current_client.disconnect()
                bot_running = False

            elif command.strip().lower() == "restart":
                print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
                await reload_data()
                print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                await current_client.disconnect()
                await main()
                
            elif command.strip().lower() == "status":
                print("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω" if client.is_connected()
                            else "–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                
            elif command.strip().lower().split()[0] == "user":
                print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{await db.find_user(command.strip().lower().split()[1])}")

            elif command.strip().lower().split()[0] == "logs":
                await showLogs(command.strip().lower().split())

        except (EOFError, KeyboardInterrupt):
            break

async def showLogs(list_arg:list):
    headers = ["–ù–æ–º–µ—Ä","–î–∞—Ç–∞","–£—Ä–æ–≤–µ–Ω—å","–ú–æ–¥—É–ª—å","–°–æ–æ–±—â–µ–Ω–∏–µ","–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
    data = []
    if len(list_arg) == 2:
        data = await db.get_logs(limit=list_arg[1])
    elif len(list_arg) == 3:
        data = await db.get_logs(limit=list_arg[1], level=list_arg[2])
    elif len(list_arg) == 4:
        data = await db.get_logs(limit=list_arg[1], level=list_arg[2], module=list_arg[3])
    else:
        data = await db.get_logs()

    print(tabulate(data[::-1], headers=headers, tablefmt="grid"))
    
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π"""
    global current_client
    current_client = TelegramClient('bot_session', int(api_key), api_hash)
    await init_handlers(current_client)
    await current_client.start(bot_token=bot_token)
    await add_log("INFO", __name__, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    #print(categories["characters"].data['–±–µ–Ω–Ω–µ—Ç'])
    await current_client.run_until_disconnected()

async def main():
    await db.init_db()
    os.makedirs('materials', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        start_bot(),
        command_line_interface()
    )

if __name__ == '__main__':
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ!")
    finally:
        if loop.is_running():
            loop.close()
        print("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
